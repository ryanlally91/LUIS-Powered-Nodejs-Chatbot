var builder = require('botbuilder');
var restify = require('restify');

// Setup restify server
var server = restify.createServer();
server.listen(process.env.port || process.env.PORT || 3978, function () {
	console.log('%s listening to %s', server.name, server.url);
});


var connector = new builder.ChatConnector();

// Connecting chatConnector and restify
server.post('/api/messages', connector.listen());

var bot = new builder.UniversalBot(connector);

// Variables to hold LUISs credential so that we can utilize the API
var luisAppId = "a2e274d5-c204-4084-97e2-a9e071cbb8b7"; //In the LUIS settings tab
var luisAPIKey = "e89bda59b4a44c6f80e09fbea6dbefa2"; //Key API string on LUIS publish page 
var luisAPIHostName = "westus.api.cognitive.microsoft.com";

const luisModelUrl = 'https://' + luisAPIHostName + '/luis/v2.0/apps/' + luisAppId + '?subscription-key=' + luisAPIKey;

var recognizer = new builder.LuisRecognizer(luisModelUrl);
var intents = new builder.IntentDialog({recognizers: [recognizer]});

// Connect intent dialogue and universal Bot
bot.dialog('/', intents);

// Handlers
intents.matches('Greet', (session, args, next) => {
	session.send("Hello there! I'm Eva, the movie ticket booking bot. How can I help you?");
});


// Ultimately this info would be stored in an database. Stored locally here for example purposes
var movies = [
	"avengers",
	"jurassic world",
	"rampage",
	"incredibles 2"
];

intents.matches('ShowNowPlaying', (session, args, next) => {
	session.send("Sure, here is the list of movies currently playing:\n\n" + movies.join("\n\n"));
});


intents.matches('BookTicket', [(session, args, next) => {
	console.log(JSON.stringify(args));//we can use a json viewer on our browser taking the details from the console, this way we can see all our entities
	
	// Filter entities
	//
	var movieEntity = args.entities.filter(e => e.type == "Movies");
	var noOfTicketsEntity = args.entities.filter(e => e.type == "builtin.number");
	
	// Because filter function returns an array of filtered objects
	if(movieEntity.length > 0){
		session.userData.movie = movieEntity[0].resolution.values[0];
	} else{
		delete session.userData.movie; // Want to make sure we're starting with a clean function everytime this app starts as we'll be doing a lot of testing
	}
	
	if(noOfTicketsEntity.length > 0){
		session.userData.noOfTickets = noOfTicketsEntity[0].resolution.values;
	} else{
		delete session.userData.noOfTickets; 
	}
	
	if(!session.userData.movie){// If we dont find the movie they want
		session.beginDialog('askMovie');
	}else{
		next();// Will take us to the next handler function in the waterfall dialog
	}
}, (session, args, next) => {
	
	
	if(!session.userData.noOfTickets){
		session.beginDialog('askNoOfTickets');
	}else{
		next();// Will take us to the next handler function in the waterfall dialog
	}
}, (session, args, next) => {
	// At this point we will have all the info required to make a booking
	session.send("Sure, I have booked you " + session.userData.noOfTickets + " tickets for " + session.userData.movie + ". Have fun!");
	
}]);

// Waterfall model, will auotmatically navigate to next handler in array
bot.dialog('askMovie', [(session, args, next) => {
		builder.Prompts.choice(session, 'What movie would you like to watch?', movies);
},	(session, results) => {
	session.userData.movie = results.response.entity;
	session.endDialogWithResult(results);
}]);


bot.dialog('askNoOfTickets', [(session, args, next) => {
		builder.Prompts.number(session, 'Great! How many tickets would you like to book?');
},	(session, results) => {
	session.userData.noOfTickets = results.response;
	session.endDialogWithResult(results);
}]);